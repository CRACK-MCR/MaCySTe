import logging

from abc import ABC
from dataclasses import dataclass, field
from typing import Optional, List

@dataclass
class AttackParameter(ABC):
    name: str
    description: str
    required: bool = False
    def to_json(self):
        return {
            'name': self.name,
            'description': self.description,
            'required': self.required,
        }

@dataclass
class AttackNumberParameter(AttackParameter):
    default: Optional[float] = None
    min: Optional[float] = None
    max: Optional[float] = None
    def to_json(self):
        o = super().to_json()
        o['type'] = 'number'
        if self.default is not None: o['default'] = self.default
        if self.min is not None: o['min'] = self.min
        if self.max is not None: o['max'] = self.max
        return o

@dataclass
class Attack(ABC):

    name: str
    ui_name: str
    description: str
    parameters: List[AttackParameter] = field(default_factory = list)

    async def run(self, **params):
        pass

    def build_parameters_dict(self, *params):
        return {
            k:v
            for k,v in zip(self.parameter_names(), params)
        }

    def parameter_names(self):
        return list(map(lambda x : x.name, self.parameters))

    def to_json(self):
        return {
            'name': self.name,
            'ui_name': self.ui_name,
            'description': self.description,
            'parameters': [ x.to_json() for x in self.parameters ],
        }

    @property
    def logger(self):
        return logging.getLogger(self.__class__.__name__)