From 876e65ff6a2727e1a22a8ce628494f406ae9a2e2 Mon Sep 17 00:00:00 2001
From: Giacomo Longo <gabibbo97@gmail.com>
Date: Wed, 21 Dec 2022 22:32:26 +0100
Subject: [PATCH 01/10] Add NMEA sentences VDM VDO VTG VHW

---
 src/NMEA.cpp            | 122 ++++++++++++++++++++++++++++++++++++++++
 src/NMEA.hpp            |  10 +++-
 src/SimulationModel.cpp |   9 +++
 src/SimulationModel.hpp |   2 +
 4 files changed, 141 insertions(+), 2 deletions(-)

diff --git a/src/NMEA.cpp b/src/NMEA.cpp
index 47866891..575e65b5 100644
--- a/src/NMEA.cpp
+++ b/src/NMEA.cpp
@@ -26,6 +26,19 @@
 #include <string>
 #include <thread>
 #include <vector>
+#include <marnav/ais/ais.hpp>
+#include <marnav/ais/message_03.hpp>
+#include <marnav/ais/message_05.hpp>
+#include <marnav/ais/message_21.hpp>
+#include <marnav/nmea/vdm.hpp>
+#include <marnav/nmea/vdo.hpp>
+#include <marnav/nmea/vtg.hpp>
+#include <marnav/nmea/vhw.hpp>
+#include <marnav/geo/geodesic.hpp>
+#include <marnav/geo/position.hpp>
+
+#define AIS_SKIP_OWN // Define to skip AIS for own ship
+#define AIS_SKIP_BUOYS // Define to skip AIS for buoys
 
 NMEA::NMEA(SimulationModel* model, std::string serialPortName, irr::u32 serialBaudrate, std::string udpHostname, std::string udpPortName, std::string udpListenPortName, irr::IrrlichtDevice* dev) : autopilot(model) //Constructor
 {
@@ -565,6 +578,85 @@ void NMEA::updateNMEA()
             messageToSend.append(addChecksum(std::string(messageBuffer)));
             break;
         */
+        case VDM:
+            {
+                // Buoys
+                #ifndef AIS_SKIP_BUOYS
+                for (auto i = 0; i < model->getNumberOfBuoys(); i++) {
+                    auto buoyLat = model->ZToLat(model->getBuoyPosZ(i));
+                    auto buoyLong = model->XToLong(model->getBuoyPosX(i));
+                    // Assign AToN number
+                    auto mmsi = atonMMSI + i;
+                    // AIS message 21 - aids to navigation
+                    {
+                        marnav::ais::message_21 message;
+                        message.set_mmsi(marnav::utils::mmsi{mmsi});
+                        message.set_lat(buoyLat);
+                        message.set_lon(buoyLong);
+                        message.set_position_accuracy(true);
+
+                        message.set_vessel_dimension(marnav::ais::vessel_dimension{
+                            marnav::units::meters{0},marnav::units::meters{1},
+                            marnav::units::meters{0},marnav::units::meters{1}
+                        });
+
+                        char name[16];
+                        snprintf(name, 16, "BUOY%d", i+1);
+                        message.set_name(name);
+
+                        message.set_off_position(marnav::ais::off_position_indicator::on_position);
+                        message.set_virtual_aid_flag(marnav::ais::virtual_aid::real_aid);
+
+                        encodeAISMessage(message, VDM);
+                    }
+                }
+                #endif
+            }
+            break;
+        case VDO:
+            {
+                #ifndef AIS_SKIP_OWN
+                // AIS message 3 - position report
+                {
+                    marnav::ais::message_03 message;
+                    message.set_mmsi(marnav::utils::mmsi{ownMMSI});
+                    message.set_cog(model->getCOG());
+                    message.set_hdg(model->getHeading());
+                    message.set_lat(model->getLat());
+                    message.set_lon(model->getLong());
+                    message.set_nav_status(marnav::ais::navigation_status::under_way_using_engine);
+                    message.set_position_accuracy(true);
+                    message.set_rot(marnav::ais::rate_of_turn { model->getRateOfTurn() });
+                    encodeAISMessage(message, VDO);
+                }
+                #endif
+                // AIS message 5 - vessel and journey data
+                {
+                    marnav::ais::message_05 message;
+                    message.set_mmsi(marnav::utils::mmsi{ownMMSI});
+                    message.set_shipname(std::string{"PLAYER"});
+                    encodeAISMessage(message, VDO);
+                }
+            }
+            break;
+        case VTG:
+            {
+                marnav::nmea::vtg message;
+                message.set_speed_kmh(marnav::units::meters_per_second { model->getSOG() });
+                message.set_speed_kn(marnav::units::meters_per_second { model->getSOG() });
+                message.set_track_true(model->getCOG());
+                messageQueue.push_back(marnav::nmea::to_string(message) + "\r\n" );
+            }
+            break;
+        case VHW:
+            {
+                marnav::nmea::vhw message;
+                message.set_speed_kmh(marnav::units::meters_per_second { model->getSpeed() });
+                message.set_speed_knots(marnav::units::meters_per_second { model->getSpeed() });
+                message.set_heading_true(model->getHeading());
+                messageQueue.push_back(marnav::nmea::to_string(message) + "\r\n" );
+            }
+            break;
         default:
             break;
     }
@@ -619,3 +711,33 @@ std::string NMEA::addChecksum(std::string messageIn)
     snprintf(checksumBuffer,sizeof(checksumBuffer),"%02X",checksum);
     return messageIn + "*" + std::string(checksumBuffer) + "\r\n";
 }
+
+void NMEA::encodeAISMessage(const marnav::ais::message &msg, const NMEAMessage msgType)
+{
+    // Encode AIS message
+    auto payload = marnav::ais::encode_message(msg);
+    switch (msgType) {
+        case VDM:
+            for (int i = 0; i < payload.size(); i++) {
+                marnav::nmea::vdm vdm;
+                vdm.set_n_fragments(payload.size());
+                vdm.set_fragment(i + 1);
+                vdm.set_radio_channel(marnav::nmea::ais_channel::A);
+                vdm.set_payload(payload[i]);
+                messageQueue.push_back(marnav::nmea::to_string(vdm) + "\r\n" );
+            }
+            break;
+        case VDO:
+            for (int i = 0; i < payload.size(); i++) {
+                marnav::nmea::vdo vdo;
+                vdo.set_n_fragments(payload.size());
+                vdo.set_fragment(i + 1);
+                vdo.set_radio_channel(marnav::nmea::ais_channel::A);
+                vdo.set_payload(payload[i]);
+                messageQueue.push_back(marnav::nmea::to_string(vdo) + "\r\n" );
+            }
+            break;
+        default:
+            return;
+    }
+}
\ No newline at end of file
diff --git a/src/NMEA.hpp b/src/NMEA.hpp
index cb3951ca..12c6f747 100644
--- a/src/NMEA.hpp
+++ b/src/NMEA.hpp
@@ -23,6 +23,7 @@
 #include <mutex>
 #include <string>
 #include <asio.hpp> //For UDP
+#include <marnav/ais/ais.hpp>
 
 //Forward declarations
 class SimulationModel;
@@ -40,7 +41,7 @@ public:
     void ReceiveThread(std::string udpListenPortName);
     void receive();
     // not implemented: RSD, OSD, POS, VTG, HRM, VDO, HBT
-    enum NMEAMessage { RMC=0, GPROT, GLL, RSA, RPM, GPHDT, HEROT, TTM, GGA, ZDA, DTM, HEHDT, TIROT, DPT};
+    enum NMEAMessage { RMC=0, GPROT, GLL, RSA, RPM, GPHDT, HEROT, TTM, GGA, ZDA, DTM, HEHDT, TIROT, DPT, VDM, VDO,  VTG, VHW };
 
 private:
     Autopilot autopilot;
@@ -52,7 +53,7 @@ private:
     std::vector<std::string> messageQueue;
     std::string messageToSend;
     std::string addChecksum(std::string messageIn);
-    const int maxMessages = (DPT - RMC) + 1; // how many messages are defined
+    const int maxMessages = (VHW - RMC) + 1; // how many messages are defined
 	static const int maxSentenceChars = 79+1+1; // iaw EN 61162-1:2011 + start char + null termination
     const char northing[2] = {'N', 'S'};
     const char easting[2] = {'E', 'W'};
@@ -65,6 +66,11 @@ private:
     std::mutex terminateNmeaReceiveMutex;
     std::vector<std::string> receivedNmeaMessages;
     std::mutex receivedNmeaMessagesMutex;
+
+    void encodeAISMessage(const marnav::ais::message &msg, const NMEAMessage msgType);
+    // https://www.itu.int/en/ITU-R/terrestrial/fmd/Pages/mid.aspx
+    const irr::u32 ownMMSI = 247000000;
+    const irr::u32 atonMMSI = 992320000;
 };
 
 #endif // __NMEA_HPP_INCLUDED__
diff --git a/src/SimulationModel.cpp b/src/SimulationModel.cpp
index 74b60ad4..a3f4a788 100644
--- a/src/SimulationModel.cpp
+++ b/src/SimulationModel.cpp
@@ -1465,3 +1465,12 @@ SimulationModel::~SimulationModel()
         */
     }
 
+    irr::f32 SimulationModel::XToLong(irr::f32 x) const
+    {
+        return terrain.xToLong(x); //Cascade to terrain
+    }
+
+    irr::f32 SimulationModel::ZToLat(irr::f32 z) const
+    {
+        return terrain.zToLat(z); //Cascade to terrain
+    }
\ No newline at end of file
diff --git a/src/SimulationModel.hpp b/src/SimulationModel.hpp
index 981e5e6d..e57e6d25 100644
--- a/src/SimulationModel.hpp
+++ b/src/SimulationModel.hpp
@@ -226,6 +226,8 @@ public:
 	void endHorn();
 
     void update();
+    irr::f32 XToLong(irr::f32 x) const;
+    irr::f32 ZToLat(irr::f32 z) const;
 
 private:
     irr::IrrlichtDevice* device;
-- 
2.39.0

